// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field int length, max;
    field Array str;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
      if(maxLength < 0) {
        do Sys.error(14);
      }
      if(maxLength > 0) {
        let str = Array.new(maxLength);
      } else {
        let str = Memory.alloc(1);
      }
      let max = maxLength;
      let length = 0;
      return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this String. */
    method int length() {
      return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
      if(~(j < length)) {
        do Sys.error(15);
      }
      return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
      if(~(j < length)) {
        do Sys.error(16);
      }
      let str[j] = c;
      return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
      if(~(length < max)) {
        do Sys.error(17);
      }
      let str[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
      if(~(length > 0)) {
        do Sys.error(18);
      }
      let length = length - 1;
      let str[length] = 0;
      return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
      var int v, i, d, c;
      var boolean neg;

      let v = 0;
      let i = 0;

      if(charAt(0) = 45) {
        let neg = true;
        let i = 1;
      } else {
        let neg = false;
      }

      while(i < length) {
        let c = charAt(i);
        let d = c - 48;
        if((d > -1) & (d < 10)) {
          let v = Math.multiply(v, 10) + d;
          let i = i + 1;
        } else {
          if(neg) {
            return -v;
          } else {
            return v;
          }

        }
      }
      if(neg) {
        return -v;
      } else {
        return v;
      }

    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
      var int firstDigits, lastDigit, c, i, j;
      var String chars;

      let i = 0;
      let j = length;

      while(i < j) {
        do eraseLastChar();
        let i = i + 1;
      }

      if(number < 0) {
        do appendChar(45);
      }

      let number = Math.abs(number);
      let chars = String.new(6);

      // separate last digit, save first digits
      let firstDigits = Math.divide(number, 10);
      let lastDigit = number - Math.multiply(firstDigits, 10);
      let c = lastDigit + 48;

      do chars.appendChar(c);
      let number = firstDigits;

      while(firstDigits > 0) {
        if(chars.length() = max) {
          do Sys.error(19);
        }

        let firstDigits = Math.divide(number, 10);
        let lastDigit = number - Math.multiply(firstDigits, 10);
        let c = lastDigit + 48;

        do chars.appendChar(c);
        let number = firstDigits;
      }

      // chars is number backwards, so append to return string right to left
      let i = chars.length();
      while(i > 0) {
        let i = i - 1;
        do appendChar(chars.charAt(i));
      }
      do Memory.deAlloc(chars);
      return;
    }


    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
